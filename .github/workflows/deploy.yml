name: Infra Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      CODEDEPLOY_APP_NAME: ${{ secrets.CODEDEPLOY_APP_NAME }}
      CODEDEPLOY_DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-user
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        run: terraform init -backend-config="bucket=ki-terraform-state" -backend-config="region=$AWS_REGION"

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve tfplan
      
      - name: Create AppSpec file
        run: |
          cat > appspec.json << EOF
            {
              "version": "0.0",
              "Resources": [
                {
                  "TargetService": {
                    "Type": "AWS::ECS::Service",
                    "Properties": {
                      "TaskDefinition": "$IMAGE_URI",
                      "LoadBalancerInfo": {
                        "ContainerName": "url-shortener",
                        "ContainerPort": 80
                      }
                    }
                  }
                }
              ]
            }
            EOF

      - name: Debug environment variables
        run: |
           echo "CODEDEPLOY_APP_NAME=$CODEDEPLOY_APP_NAME"
           echo "CODEDEPLOY_DEPLOYMENT_GROUP=$CODEDEPLOY_DEPLOYMENT_GROUP"
           echo "IMAGE_URI=$IMAGE_URI"

      - name: Print CodeDeploy variables
        run: |
           echo "App Name: '$CODEDEPLOY_APP_NAME'"
           echo "Deployment Group: '$CODEDEPLOY_DEPLOYMENT_GROUP'"



      - name: Trigger CodeDeploy ECS Deployment
        env:
         CODEDEPLOY_APP_NAME: ${{ secrets.CODEDEPLOY_APP_NAME }}
         CODEDEPLOY_DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}
        run: aws deploy create-deployment \
             --application-name "${CODEDEPLOY_APP_NAME:-url-shortener-app}" \  
             --deployment-group-name "$CODEDEPLOY_DEPLOYMENT_GROUP" \
             --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
             --description "Deployment triggered by GitHub Actions" \
             --revision "revisionType=AppSpecContent,appSpecContent={\"content\":\"$(cat appspec.json | jq -Rs .)\"}"

      - name: Wait for Deployment Completion
        run: aws deploy wait deployment-successful \
             --deployment-id $(aws deploy list-deployments \
             --application-name "${CODEDEPLOY_APP_NAME:-url-shortener-app}" \
             --deployment-group-name "$CODEDEPLOY_DEPLOYMENT_GROUP" \
             --include-only-statuses Created,Queued,InProgress \
             --query "deployments[-1]" --output text)
